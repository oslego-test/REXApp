/** 
    @class
    EventManager is an object used to listen for, and dispatch, events.
    It can be used stand alone, or it can be inherited by another object.
    
    The EventManager's bind() method is similar to element.addEventListener().
    The EventManager's trigger() method is similar to element.dispatchEvent().
*/
/**
    @example
    <script type="text/javascript">
        
        var em = new EventManager(); 
        
        // add an event listener for a custom event
        em.bind("customEvent", function(data){ 
            alert(data.msg) 
        });
         
        // trigger a custom event with some data
        em.trigger("customEvent", {msg: "Hello World!"});
        
    </script>
*/
function EventManager(){
};

/** 
    Storage for the events and callback functions
*/  
EventManager.prototype.events = {}

/**
    Store an event listener for this instance.
    
    Provides a 'privileged' access to this.events store. Because of this it is defined in the constructor, 
    not directly through the prototype object.
    
    @param {String} eventName The name of the event to listen to.
    @param {Function} func The callback function to be called when the eventName is triggered.
    @param {Object} [context] Optional in which to execute the associated callback. Default: 'window'.
    
    @returns {Undefined}
*/
EventManager.prototype.bind = function(eventName, func, context){   
    
    // Create a storage for this custom event name if none exists
    if (!this.events[eventName]){
        this.events[eventName] = [];
    }             

    this.events[eventName].push({fn: func, ctx: context || this})
}

/**
    Execute the callback functions associated with a custom event for this instance.
    
    Provides a 'privileged' access to this.events store. Because of this it is defined in the constructor, 
    not directly through the prototype object.
    
    @param {String} eventName The name of the event for which to call the callback functions.
    @param {Object} [eventObj] Optional object with data to be used by the callback functions.  
    
    @returns {Undefined}
*/
EventManager.prototype.trigger = function(eventName, eventObj){  
	if (this.events[eventName]){
		this.events[eventName].map(function(cbObj){
			cbObj.fn.call(cbObj.ctx, eventObj)
		})
	}
}

function Crawler(settings){
  var _crawlService = "http://query.yahooapis.com/v1/public/yql/oslego/crawler";
  this.id = settings.id;
  this.url = settings.url;
  this.rowXPath = settings.rowXPath;
  this.parser = settings.parser || function (){};
  
  this.getCrawlServiceURL =  function(){
    return _crawlService + "?format=json" + "&url=" + encodeURIComponent(this.url) + "&xpath="+ encodeURIComponent(this.rowXPath);
  }

  this.events = {}
}

Crawler.prototype = EventManager.prototype;
 
Crawler.prototype.init = function(){
  var crawlerServiceURL = this.getCrawlServiceURL();
  Logger.log(crawlerServiceURL);
  
  var response = UrlFetchApp.fetch(crawlerServiceURL);
  var data = Utilities.jsonParse(response.getContentText());
  
  this.trigger("start", {message: "yahoo!"});

  if (typeof this.parser == "function"){
    this.parser.call(this, data);
  }
};

Crawler.prototype.getCurrencyValue = function(string){
    if (!string || typeof string !== "string"){
        return null
    }

    var floatString = string.replace(",",".");
    var value = parseFloat(floatString);
    
    if (!isNaN(value)){
        return value;
    }
};

/*
Takes a natural language string and tries to match a valid currency code.
@param {String} string 
	natural language string to be decoded.
	
@return {String}, null 
	string with the currency code. Example: USD	
	null if no currency code could be found.
	
Example: getCurrencyCode("American Dollar") -> USD
Example: getCurrencyCode("100 Hungarian Forints") -> HUF
Example: getCurrencyCode("Skittles") -> null
*/

Crawler.prototype.getCurrencyCode = function(string){
	var _currencyTests = {
		// euro
		eur: function(str){ 
			var pattern =  /\beuro?\b>*/gi;
			return pattern.test(string) 
		},
		
		// dolar american
		usd: function(str){
			var pattern =  /\busd\b|\bdolar(ul|i{0,1})?\b(\s*\b(america(n|ni)?|usd|s\.?u\.?a\.?)\b)/gi;
			return pattern.test(string) 
		},
		
		// dolar australian
		aud: function(str){
			var pattern =  /\baud\b|\bdolar(ul|i{0,1})?\b(\s*\b(australi(an|ani|eni)?|aud)\b)/gi;
			return pattern.test(string) 
		},
		
		// dolar canada
		cad: function(str){
			var pattern =  /\bdolar(ul|i{0,1})?\b(\s*\b(canad(a|ian|ieni))\b)/gi;
			return pattern.test(string) 
		},
	
		// franc elvetian
		chf: function(str){
			var pattern =  /\bchf\b|\bfranc(ul|i{0,1})?\b(\s*\b(elveti(an|eni))\b)/gi;
			return pattern.test(string) 
		},
	
		// coroana suedeza
		sek: function(str){
			var pattern =  /\bcoroan(a|e)\b(\s*\b(sued(ia|eza|eze))\b)/gi;
			return pattern.test(string) 
		},
		
		// coroana daneza
		dkk: function(str){
			var pattern =  /\bcoroan(a|e)\b(\s*\b(dane(marca|za|ze))\b)/gi;
			return pattern.test(string) 
		},

		// coroana islandeza
		ikk: function(str){
			var pattern =  /\bcoroan(a|e)\b(\s*\b(island(a|eze))\b)/gi;
			return pattern.test(string) 
		},

		// coroana norvegiena
		nok: function(str){
			var pattern =  /\bcoroan(a|e)\b(\s*\b(norvegi(a|ene))\b)/gi;
			return pattern.test(string) 
		},
		
		// lirea sterlina
		gbp: function(str){
			var pattern =  /\bgbp\b|\blir(a|e)\b(\s*\b(sterlin(a|ene))\b)/gi;
			return pattern.test(string) 
		},
	
		// yen japonez
		jpy: function(str){
			var pattern =  /\byeni{0,2}\b(\s*\b(japon(ia|ez|ezi))\b)/gi;
			return pattern.test(string) 
		},
		
		// forint unguresc
		huf: function(str){
			var pattern =  /\b\d*?huf\d*?\b|\bforinti{0,2}\b(\s*\b(ung(aria|uresc|uresti))\b)/gi;
			return pattern.test(string) 
		},
		
		// zlot polonez
		pln: function(str){
			var pattern =  /\bzloti{0,2}\b(\s*\b(polon(ia|ez|ezi))\b)/gi;
			return pattern.test(string) 
		},
		
		// corona ceha
		czk: function(str){
			var pattern =  /\bcoroan(a|e)\b(\s*\b(ceh(a|ia|e|esti))\b)/gi;
			return pattern.test(string) 
		},
		
		// rubla ruseasca
		rub: function(str){
			var pattern =  /\brubl(a|e)\b(\s*\b(rus(a|ia|easca|esti))\b)/gi;
			return pattern.test(string) 
		},
		
		// leva bulgara
		bgn: function(str){
			var pattern =  /\bleva\b(\s*\b(bulgar(a|ia|e|esti))\b)/gi;
			return pattern.test(string) 
		}		
	}
	
	for (i in _currencyTests){
		if (_currencyTests[i].call(string))
			return i.toUpperCase()
	}
};

Crawler.prototype.getCurencyMultiplier = function(string){
	var digits = string.match(/\d+/);
	return digits ? parseInt(digits[0], 10) : 1;
};



var Crawlers = {};

Crawlers["BRD"] = new Crawler({
  url: "http://www.brd.ro/piete-financiare/piata-valutara-si-monetara/curs-de-schimb/",
  rowXPath: '//div[@id="content"]//table[1]//td/table/tr',
  id: "BRD",
  parser: function(data){
  
    var rows = data.query.results.tr;
    var results = [];
    
    for (var i=0, len = rows.length; i<len; i++ ){
      // the currency code node
      var currNode = rows[i].td[1];
      
      // the buy value node
      var buyNode = rows[i].td[5];
      
      // the sell value node
      var sellNode = rows[i].td[6];    
      
      if (currNode && currNode.p && currNode.p.length == 3){
        // storage for the node output
        var resultNode = {};
        
        resultNode.bank = this.id;
        resultNode.currency = currNode.p;
        
        
        resultNode.buy = this.getCurrencyValue(buyNode.p);        
        resultNode.sell = this.getCurrencyValue(sellNode.p)
        
        results.push(resultNode);
      }
    }
   
    this.trigger("complete", { "results": results });
  }
});

Crawlers["BCR"] = new Crawler({
  url: "https://www.bcr.ro/ro/curs-valutar",
  rowXPath: '//div[@id="main0BCRExchange_result"]/table/tr',
  id: "BCR",
  parser: function(data){
  
    var rows = data.query.results.tr;
    var results = [];
    
    for (var i=0, len = rows.length; i<len; i++ ){
      
      try{
        // the currency code node
        var currNode = rows[i].td[1];
    
        // the buy value node
        var buyNode = rows[i].td[2];
        
        // the sell value node
        var sellNode = rows[i].td[3];    
        
        if (currNode && currNode.p){
  
          // storage for the node output
          var resultNode = {};
          
          resultNode.bank = this.id;
          resultNode.currency = this.getCurrencyCode(currNode.p);
  
          // return if there's no valid currency code
          if (resultNode.currency.length != 3){
              return false;
          }
          resultNode.buy = this.getCurrencyValue(buyNode.p);
          resultNode.sell = this.getCurrencyValue(sellNode.p)
          
          
          results.push(resultNode);
        }
      }
      catch(e){
        Logger.log(e.toString())
      }
    }
   
    this.trigger("complete", { "results": results });
  }
});

Crawlers["AlphaBank"] = new Crawler({
  url: "https://www.alphabank.ro/ro/rate/rate_si_dobanzi.php",
  rowXPath: '//table[@class="tabela_principala"]/tr[6]/td[4]/table[2]/tr',
  id: "AlphaBank",
  parser: function(data){
  
    var rows = data.query.results.tr;
    var results = [];
    
    for (var i=0, len = rows.length; i<len; i++ ){
      
      try{
        // the currency code node
        var currNode = rows[i].td[0];
    
        // the buy value node
        var buyNode = rows[i].td[4];
        
        // the sell value node
        var sellNode = rows[i].td[5];    
        
        if (currNode && currNode.p){
  
          // storage for the node output
          var resultNode = {};
          
          resultNode.bank = this.id;
          resultNode.currency = this.getCurrencyCode(currNode.p);
  
          // return if there's no valid currency code
          if (resultNode.currency.length != 3){
              return false;
          }
          
          resultNode.buy = this.getCurrencyValue(buyNode.p);
          resultNode.sell = this.getCurrencyValue(sellNode.p)          
          
          results.push(resultNode);
        }
      }
      catch(e){
        Logger.log(e.toString())
      }
    }
   
    this.trigger("complete", { "results": results });
  }
})

Crawlers["PiraeusBank"] = new Crawler({
  url: "http://www.piraeusbank.ro/Banca/Unelte/Istoric-Curs-Valutar.html",
  rowXPath: '//table[@id="ctl00_contentPlaceHolder_ctl02_gvIstoricCursValutar"]/tr',
  id: "PiraeusBank",
  parser: function(data){
  
    var rows = data.query.results.tr;
    var results = [];
    
    for (var i=0, len = rows.length; i<len; i++ ){
      
      try{
        // the currency code node
        var currNode = rows[i].td[1].span.content;
    
        // the buy value node
        var buyNode = rows[i].td[2];
        
        // the sell value node
        var sellNode = rows[i].td[3];    
        
        if (currNode){
  
          // storage for the node output
          var resultNode = {};
          
          resultNode.bank = this.id;
          resultNode.currency = this.getCurrencyCode(currNode);
  
          // return if there's no valid currency code
          if (resultNode.currency.length != 3){
              return false;
          }
          
          resultNode.buy = this.getCurrencyValue(buyNode.span.content);
          resultNode.sell = this.getCurrencyValue(sellNode.span.content);
          
          
          results.push(resultNode);
        }
      }
      catch(e){
        Logger.log(e.toString())
      }
    }
   
    this.trigger("complete", { "results": results });
  }
});

Crawlers["CEC"] = new Crawler({
  url: "https://www.cec.ro/curs-valutar.aspx",
  rowXPath: '//div[@id="content-b"]/div[2]/table/tr',
  id: "CEC",
  parser: function(data){
  
    var rows = data.query.results.tr;
    var results = [];
    
    for (var i=0, len = rows.length; i<len; i++ ){
      
      try{
        // the currency code node
        var currNode = rows[i].td[0].p;
    
        // the buy value node
        var buyNode = rows[i].td[1];
        
        // the sell value node
        var sellNode = rows[i].td[2];    
        
        if (currNode){
  
          // storage for the node output
          var resultNode = {};
          
          resultNode.bank = this.id;
          resultNode.currency = this.getCurrencyCode(currNode);
  
          // return if there's no valid currency code
          if (resultNode.currency.length != 3){
              return false;
          }
          
          resultNode.buy = this.getCurrencyValue(buyNode.p);
          resultNode.sell = this.getCurrencyValue(sellNode.p);
          
          
          results.push(resultNode);
        }
      }
      catch(e){
        Logger.log(e.toString())
      }
    }

    if (results.length){
      this.trigger("complete", { "results": results });
    }
    
  }
})

Crawlers["BT"] = new Crawler({
  url: "http://www.bancatransilvania.ro/bt/curs_valutar_spot.html",
  rowXPath: '/html/body/table/tr[3]/td[@class=\'main_table\']/table/tr[3]/td/table/tr/td/table/tr[5]/td[2]/table/tr[4]/td/table/tr',
  id: "BT",
  parser: function(data){
  
    var rows = data.query.results.tr;
    var results = [];
    
    for (var i=0, len = rows.length; i<len; i++ ){
      
      try{
        // the currency code node
        var currNode = rows[i].td[2].p;
    
        // the buy value node
        var buyNode = rows[i].td[5];
        
        // the sell value node
        var sellNode = rows[i].td[6];    
        
        if (currNode){
  
          // storage for the node output
          var resultNode = {};
          
          resultNode.bank = this.id;
          resultNode.currency = this.getCurrencyCode(currNode);
  
          // return if there's no valid currency code
          if (resultNode.currency.length != 3){
              return false;
          }
          
          resultNode.buy = this.getCurrencyValue(buyNode.p);
          resultNode.sell = this.getCurrencyValue(sellNode.p);
          
          
          results.push(resultNode);
        }
      }
      catch(e){
        Logger.log(e.toString())
      }
    }

    if (results.length){
      this.trigger("complete", { "results": results });
    }
    
  }
})

var LECrawler = new Crawler({
  url: "http://www.bancatransilvania.ro/bt/curs_valutar_spot.html",
  rowXPath: '/html/body/table/tr[3]/td[@class=\'main_table\']/table/tr[3]/td/table/tr/td/table/tr[5]/td[2]/table/tr[4]/td/table/tr',
  id: "BT",
  parser: function(data){
  
    var rows = data.query.results.tr;
    var results = [];
    
    for (var i=0, len = rows.length; i<len; i++ ){
      
      try{
        // the currency code node
        var currNode = rows[i].td[2].p;
    
        // the buy value node
        var buyNode = rows[i].td[5];
        
        // the sell value node
        var sellNode = rows[i].td[6];    
        
        if (currNode){
  
          // storage for the node output
          var resultNode = {};
          
          resultNode.bank = this.id;
          resultNode.currency = this.getCurrencyCode(currNode);
  
          // return if there's no valid currency code
          if (resultNode.currency.length != 3){
              return false;
          }
          
          resultNode.buy = this.getCurrencyValue(buyNode.p);
          resultNode.sell = this.getCurrencyValue(sellNode.p);
          
          
          results.push(resultNode);
        }
      }
      catch(e){
        Logger.log(e.toString())
      }
    }

    if (results.length){
      this.trigger("complete", { "results": results });
    }
    
  }
})
      
function init(){
  //location where to store the crawl results
  var spreadSheetID = "0ApCgnHeBRsTqdDhwVmk2YnoyWHpmZ0VlQUVnRkt2M3c";



  for (var i in Crawlers){
    Crawlers[i].bind("complete", function(e){
      var dataSheet = SpreadsheetApp.openById(spreadSheetID).getSheets()[0]
      setRowsData(dataSheet, e.results, null, dataSheet.getLastRow()+1);
    });

    Crawlers[i].init();
  }



/*
LECrawler.bind("complete", function(e){
      var dataSheet = SpreadsheetApp.openById(spreadSheetID).getSheets()[0]
      setRowsData(dataSheet, e.results, null, dataSheet.getLastRow()+1);
    });

LECrawler.init();
*/

}
  

function setRowsData(sheet, objects, optHeadersRange, optFirstDataRowIndex) {
  var headersRange = optHeadersRange || sheet.getRange(1, 1, 1, sheet.getMaxColumns());
  var firstDataRowIndex = optFirstDataRowIndex || headersRange.getRowIndex() + 1;
  var headers = normalizeHeaders(headersRange.getValues()[0]);

  var data = [];
  for (var i = 0; i < objects.length; ++i) {
    var values = []
    for (j = 0; j < headers.length; ++j) {
      var header = headers[j];
      values.push(header.length > 0 && objects[i][header] ? objects[i][header] : "");
    }
    data.push(values);
  }

  var destinationRange = sheet.getRange(firstDataRowIndex, headersRange.getColumnIndex(), 
                                        objects.length, headers.length);
  destinationRange.setValues(data);
}

// Returns an Array of normalized Strings. 
// Empty Strings are returned for all Strings that could not be successfully normalized.
// Arguments:
//   - headers: Array of Strings to normalize
function normalizeHeaders(headers) {
  var keys = [];
  for (var i = 0; i < headers.length; ++i) {
    keys.push(normalizeHeader(headers[i]));
  }
  return keys;
}

// Normalizes a string, by removing all alphanumeric characters and using mixed case
// to separate words. The output will always start with a lower case letter.
// This function is designed to produce JavaScript object property names.
// Arguments:
//   - header: string to normalize
// Examples:
//   "First Name" -> "firstName"
//   "Market Cap (millions) -> "marketCapMillions
//   "1 number at the beginning is ignored" -> "numberAtTheBeginningIsIgnored"
function normalizeHeader(header) {
  var key = "";
  var upperCase = false;
  for (var i = 0; i < header.length; ++i) {
    var letter = header[i];
    if (letter == " " && key.length > 0) {
      upperCase = true;
      continue;
    }
    if (!isAlnum(letter)) {
      continue;
    }
    if (key.length == 0 && isDigit(letter)) {
      continue; // first character must be a letter
    }
    if (upperCase) {
      upperCase = false;
      key += letter.toUpperCase();
    } else {
      key += letter.toLowerCase();
    }
  }
  return key;
}

// Returns true if the cell where cellData was read from is empty.
// Arguments:
//   - cellData: string
function isCellEmpty(cellData) {
  return typeof(cellData) == "string" && cellData == "";
}

// Returns true if the character char is alphabetical, false otherwise.
function isAlnum(char) {
  return char >= 'A' && char <= 'Z' ||
    char >= 'a' && char <= 'z' ||
    isDigit(char);
}

// Returns true if the character char is a digit, false otherwise.
function isDigit(char) {
  return char >= '0' && char <= '9';
}