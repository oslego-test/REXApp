/** 
    @class
    EventManager is an object used to listen for, and dispatch, events.
    It can be used stand alone, or it can be inherited by another object.
    
    The EventManager's bind() method is similar to element.addEventListener().
    The EventManager's trigger() method is similar to element.dispatchEvent().
*/
/**
    @example
    <script type="text/javascript">
        
        var em = new EventManager(); 
        
        // add an event listener for a custom event
        em.bind("customEvent", function(data){ 
            alert(data.msg) 
        });
         
        // trigger a custom event with some data
        em.trigger("customEvent", {msg: "Hello World!"});
        
    </script>
*/

function EventManager(){
    
    /** 
        @private 
        Storage for the events and callback functions
    */
    var _events = {};
     
    /**
        Store an event listener for this instance.
        
        Provides a 'privileged' access to _events store. Because of this it is defined in the constructor, 
        not directly through the prototype object.
        
        @param {String} eventName The name of the event to listen to.
        @param {Function} func The callback function to be called when the eventName is triggered.
        @param {Object} [context] Optional in which to execute the associated callback. Default: 'window'.
        
        @returns {Undefined}
    */
    this.bind = function(eventName, func, context){   
        
        // Create a storage for this custom event name if none exists
        if (!_events[eventName]){
            _events[eventName] = [];
        }             

        _events[eventName].push({fn: func})
    }
    
    this.getEvents =  function(){
        return _events;
    }
     
    /**
        Execute the callback functions associated with a custom event for this instance.
        
        Provides a 'privileged' access to _events store. Because of this it is defined in the constructor, 
        not directly through the prototype object.
        
        @param {String} eventName The name of the event for which to call the callback functions.
        @param {Object} [eventObj] Optional object with data to be used by the callback functions.  
        
        @returns {Undefined}
    */
    this.trigger = function(eventName, eventObj){  
    	if (_events[eventName]){
    		_events[eventName].map(function(cbObj){
    			cbObj.fn.call(this, eventObj)
    		})
    	}
	}
	
};

function Crawler(settings){
  var _crawlService = "http://query.yahooapis.com/v1/public/yql/oslego/crawler";
  this.id = settings.id;
  this.url = settings.url;
  this.rowXPath = settings.rowXPath;
  this.parser = settings.parser || function (){};
  
  this.getCrawlServiceURL =  function(){
    return _crawlService + "?format=json" + "&url=" + encodeURIComponent(this.url) + "&xpath="+ encodeURIComponent(this.rowXPath);
  }
}

Crawler.prototype = new EventManager();
 
Crawler.prototype.init = function(){
  var crawlerServiceURL = this.getCrawlServiceURL();
  Logger.log(crawlerServiceURL);
  
  var response = UrlFetchApp.fetch(crawlerServiceURL);
  var data = Utilities.jsonParse(response.getContentText());
  
  this.trigger("start", {message: "yahoo!"});

  if (typeof this.parser == "function"){
    this.parser.call(this, data);
  }
}
  


var BRDCrawler = new Crawler({
  url: "http://www.brd.ro/piete-financiare/piata-valutara-si-monetara/curs-de-schimb/",
  rowXPath: '//div[@id="content"]//table[1]//td/table/tr',
  id: "BRD"
})
      
function init(){
  //location where to store the crawl results
  var spreadSheetID = "0ApCgnHeBRsTqdDhwVmk2YnoyWHpmZ0VlQUVnRkt2M3c";

  BRDCrawler.parser = function(data){
  
    var rows = data.query.results.tr;
    var results = [];
    
    for (var i=0, len = rows.length; i<len; i++ ){
      // the currency code node
      var currNode = rows[i].td[1];
      
      // the buy value node
      var buyNode = rows[i].td[5];
      
      // the sell value node
      var sellNode = rows[i].td[6];    
      
      if (currNode && currNode.p && currNode.p.length == 3){
        // storage for the node output
        var resultNode = {};
        
        resultNode.bank = this.id;
        resultNode.currency = currNode.p;
        
        if (buyNode && parseFloat(buyNode.p) != isNaN()){
          resultNode.buy = parseFloat(buyNode.p);
        }
        
        if (sellNode && parseFloat(sellNode.p) != isNaN()){
          resultNode.sell = parseFloat(sellNode.p)
        }
        
        results.push(resultNode);
      }
    }
   
    this.trigger("complete", { "results": results });
  }

  BRDCrawler.bind("complete", function(e){
    Logger.log("Writting to spreadsheet!");

    var dataSheet = SpreadsheetApp.openById(spreadSheetID).getSheets()[0]
    setRowsData(dataSheet, e.results);
  });

  BRDCrawler.init();
}
  
function YQLUpdate() {
  
  //var message = encodeURIComponent("asta e cu timer");
  
  // The code below shows the value of the first byte of the Google home page.
  //UrlFetchApp.fetch("http://query.yahooapis.com/v1/public/yql/oslego/test_remote_update_value?format=json&callback=cbfn&value="+message);

  var response = UrlFetchApp.fetch("http://query.yahooapis.com/v1/public/yql/oslego/getbrdquotes?format=json");
  var data = Utilities.jsonParse(response.getContentText()); 
  var rows = data.query.results.tr;
  var results = [];
  
  var spreadSheetID = "0ApCgnHeBRsTqdDhwVmk2YnoyWHpmZ0VlQUVnRkt2M3c";
  var bankID = "BRD";
  
   
  
  var dataSs = SpreadsheetApp.openById(spreadSheetID);
  var dataSheet = dataSs.getSheets()[0];
  setRowsData(dataSheet, results)
  
  Logger.log(data.query.count);
}

function setRowsData(sheet, objects, optHeadersRange, optFirstDataRowIndex) {
  var headersRange = optHeadersRange || sheet.getRange(1, 1, 1, sheet.getMaxColumns());
  var firstDataRowIndex = optFirstDataRowIndex || headersRange.getRowIndex() + 1;
  var headers = normalizeHeaders(headersRange.getValues()[0]);

  var data = [];
  for (var i = 0; i < objects.length; ++i) {
    var values = []
    for (j = 0; j < headers.length; ++j) {
      var header = headers[j];
      values.push(header.length > 0 && objects[i][header] ? objects[i][header] : "");
    }
    data.push(values);
  }

  var destinationRange = sheet.getRange(firstDataRowIndex, headersRange.getColumnIndex(), 
                                        objects.length, headers.length);
  destinationRange.setValues(data);
}

// Returns an Array of normalized Strings. 
// Empty Strings are returned for all Strings that could not be successfully normalized.
// Arguments:
//   - headers: Array of Strings to normalize
function normalizeHeaders(headers) {
  var keys = [];
  for (var i = 0; i < headers.length; ++i) {
    keys.push(normalizeHeader(headers[i]));
  }
  return keys;
}

// Normalizes a string, by removing all alphanumeric characters and using mixed case
// to separate words. The output will always start with a lower case letter.
// This function is designed to produce JavaScript object property names.
// Arguments:
//   - header: string to normalize
// Examples:
//   "First Name" -> "firstName"
//   "Market Cap (millions) -> "marketCapMillions
//   "1 number at the beginning is ignored" -> "numberAtTheBeginningIsIgnored"
function normalizeHeader(header) {
  var key = "";
  var upperCase = false;
  for (var i = 0; i < header.length; ++i) {
    var letter = header[i];
    if (letter == " " && key.length > 0) {
      upperCase = true;
      continue;
    }
    if (!isAlnum(letter)) {
      continue;
    }
    if (key.length == 0 && isDigit(letter)) {
      continue; // first character must be a letter
    }
    if (upperCase) {
      upperCase = false;
      key += letter.toUpperCase();
    } else {
      key += letter.toLowerCase();
    }
  }
  return key;
}

// Returns true if the cell where cellData was read from is empty.
// Arguments:
//   - cellData: string
function isCellEmpty(cellData) {
  return typeof(cellData) == "string" && cellData == "";
}

// Returns true if the character char is alphabetical, false otherwise.
function isAlnum(char) {
  return char >= 'A' && char <= 'Z' ||
    char >= 'a' && char <= 'z' ||
    isDigit(char);
}

// Returns true if the character char is a digit, false otherwise.
function isDigit(char) {
  return char >= '0' && char <= '9';
}